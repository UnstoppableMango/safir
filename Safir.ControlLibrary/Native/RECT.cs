// <auto-generated>

namespace Safir.ControlLibrary.Native
{
    using System;
    using System.Runtime.InteropServices;
    using System.Windows;

    [Serializable]
    [StructLayout(LayoutKind.Sequential, Pack = 0)]
    public struct RECT
    {
        public static readonly RECT Empty = default(RECT);

        public int Left;
        public int Top;
        public int Right;
        public int Bottom;

        public RECT(int left, int top, int right, int bottom) {
            Left = left;
            Top = top;
            Right = right;
            Bottom = bottom;
        }

        public RECT(RECT rcSrc) {
            Left = rcSrc.Left;
            Top = rcSrc.Top;
            Right = rcSrc.Right;
            Bottom = rcSrc.Bottom;
        }

        public int Width {
            get { return Math.Abs(Right - Left); } // Abs needed for BIDI OS
        }

        public int Height {
            get { return Bottom - Top; }
        }

        public bool IsEmpty {
            get {
                // BUGBUG : On Bidi OS (hebrew arabic) left > right
                return Left >= Right || Top >= Bottom;
            }
        }

        public static bool operator ==(RECT rect1, RECT rect2) {
            return rect1.Left == rect2.Left && rect1.Top == rect2.Top && rect1.Right == rect2.Right && rect1.Bottom == rect2.Bottom;
        }

        public static bool operator !=(RECT rect1, RECT rect2) {
            return !(rect1 == rect2);
        }

        public override string ToString() {
            if (this == Empty)
                return "RECT {Empty}";
            return "RECT { left : " + Left + " / top : " + Top + " / right : " + Right + " / bottom : " + Bottom + " }";
        }

        /// <summary> Determine if 2 RECT are equal (deep compare) </summary>
        /// <param name="obj">RECT to be compared</param>
        /// <returns>If 2 RECT are equal</returns>
        public override bool Equals(object obj) {
            if (!(obj is Rect)) { return false; }
            return this == (RECT)obj;
        }

        /// <summary>Return the HashCode for this struct (not garanteed to be unique)</summary>
        /// <returns>Hash Code</returns>
        public override int GetHashCode() {
            return Left.GetHashCode() + Top.GetHashCode() + Right.GetHashCode() + Bottom.GetHashCode();
        }
    }
}
