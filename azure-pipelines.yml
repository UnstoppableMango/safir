trigger:
  batch: true
  branches:
    include:
    - master
    - release/*
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  autoCancel: false
  branches:
    include:
    - master
    - release/*

variables:
- name: RootPath
  value: src
- name: FileManagerPath
  value: $(RootPath)/FileManager
- name: UiPath
  value: $(RootPath)/UI
- name: BuildConfiguration
  value: 'Release'

stages:
- stage: build
  displayName: Build
  jobs:
  - job: pre_build
    displayName: Pre-Build
    pool: Linux
    steps:
    - task: ShellScript@2
      displayName: Set Build File Manager
      name: set_build_filemanager
      inputs:
        scriptPath: build/set-variables.sh
      env:
        ProjectPath: $(FileManagerPath)
        Source: origin/$(System.PullRequest.SourceBranch)
        Target: origin/$(System.PullRequest.TargetBranch)
    - bash: |
        if [[ $(git diff-tree --dirstat $Source..$Target -- $ProjectPath) ]]; then
          echo "##vso[task.setvariable variable=BuildUi;isOutput=true]true"
          echo "True"
        else
          echo "##vso[task.setvariable variable=BuildUi;isOutput=true]false"
          echo "False"
        fi
      displayName: Set Build UI
      name: set_build_ui
      env:
        ProjectPath: $(UiPath)
        Source: origin/$(System.PullRequest.SourceBranch)
        Target: origin/$(System.PullRequest.TargetBranch)
  - job: build_file_manager
    displayName: Build File Manager
    dependsOn: pre_build
    condition: and(succeeded(), eq(dependencies.pre_build.outputs['set_build_filemanager.BuildFileManager'], 'true'))
    strategy:
      matrix:
        Fedora:
          AGENT_OS: Fedora
        CentOS:
          AGENT_OS: Cent
        Ubuntu:
          AGENT_OS: Ubuntu
        Debian:
          AGENT_OS: Debian
      maxParallel: 4
    continueOnError: true
    pool:
      name: Linux
      demands:
      - agent.os -equals $(AGENT_OS)
    workspace:
      clean: outputs
    variables:
      ProjectPath: $(FileManagerPath)
      BinaryDirectory: '$(Build.ArtifactStagingDirectory)/$(AGENT_OS)/bin'
      PackageDirectory: '$(Build.ArtifactStagingDirectory)/$(AGENT_OS)/pack'
    steps:
    - checkout: self
    - task: UseDotNet@2
      displayName: 'Install .NET Core sdk'
      inputs:
        packageType: sdk
        useGlobalJson: true
    - task: DotNetCoreCLI@2
      displayName: .NET Restore
      inputs:
        command: restore
        projects: $(ProjectPath)/**/*.csproj
        arguments: '-c $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: .NET Build
      inputs:
        command: build
        projects: $(ProjectPath)/**/*.csproj
        arguments: '--no-restore -c $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: .NET Publish
      inputs:
        command: publish
        projects: $(ProjectPath)/**/*.csproj
        arguments: '--no-restore --no-build -c $(BuildConfiguration) -o $(BinaryDirectory)'
    - task: DotNetCoreCLI@2
      displayName: .NET Pack
      inputs:
        command: pack
        projects: $(ProjectPath)/**/*.csproj
        arguments: '--no-restore --no-build -c $(BuildConfiguration) -o $(PackageDirectory)'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(BinaryDirectory)
        artifactName: drop
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(PackageDirectory)
        artifactName: Packages
  - job: build_ui
    displayName: Build UI
    dependsOn: pre_build
    condition: and(succeeded(), eq(dependencies.pre_build.outputs['set_build_ui.BuildUi'], 'true'))
    strategy:
      matrix:
        Fedora:
          AGENT_OS: Fedora
        CentOS:
          AGENT_OS: Cent
        Ubuntu:
          AGENT_OS: Ubuntu
        Debian:
          AGENT_OS: Debian
      maxParallel: 4
    continueOnError: true
    pool:
      name: Linux
      demands:
      - agent.os -equals $(AGENT_OS)
    workspace:
      clean: outputs
    variables:
      ProjectPath: $(UiPath)
      BinaryDirectory: '$(Build.ArtifactStagingDirectory)/$(AGENT_OS)/bin'
      PackageDirectory: '$(Build.ArtifactStagingDirectory)/$(AGENT_OS)/pack'
    steps:
    - checkout: self
    - bash: echo "Building UI projects"
